substitutions:
  friendly_name: CHANGEME # the friendly name of your device, can be anything.

esphome:
  name: CHANGEME # the name of your device. It should not contain any special characters or whitespaces. the device can be found in the network by this name.
  friendly_name: ${friendly_name}
  #area: CHANGEME # the area where you deployed the device. optional

esp32:
  board: esp32dev
  framework:
    type: arduino

## Remove this if you don't want to track bluetooth device presence.
## It is also better to comment this part out while you calibrate the ld2410 as this is very memory hungry and all the sensors of the ld2410 are also memory hungry. Disable all of the sensors that you don't need after calibration helps.
esp32_ble_tracker:
  scan_parameters:
    active: True # Whether to send scan-request packets to devices to gather more info (like devicename)
    interval: 211ms # suggested 211ms # default 320ms
    window: 30ms # suggested 120ms # default 30ms

## Remove this if you don't need to expand your home assistants bluetooth range
bluetooth_proxy:
  active: true

## Enables logging, eats ram, only enable if necessary.
# logger:
#   level: DEBUG
#   baud_rate: 0

## should be disabled when BT Proxy is on due to memory consumption
# web_server:
#   port: 80
#   auth:
#     username: !secret esp-username
#     password: !secret esp-password
#   local: true

## Enables the Home Assistant API
api:
  password: !secret esp-password

## Enables to update the firmware over the air
ota:
  - platform: esphome
    password: !secret esp-password

wifi:
  ssid: "YOUR WIFI SSID"
  password: !secret wifi-password
  output_power: 8.5dB ## you may need to increase this if the esp is far away from your wifi access point. This is the minimal output power and improves the reliability of the motion sensor.

## setup the i2c bus and define the pins to use.
i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true
  id: bus_a

## adds the bme680 to the configuration. For information about the properties see: https://esphome.io/components/sensor/bme68x_bsec2/
bme68x_bsec2_i2c:
  address: 0x77
  model: bme680
  operating_age: 28d
  sample_rate: LP
  supply_voltage: 3.3V
  temperature_offset: 4.3 # this can be changed to calibrate the sensor.

## this sets up the uart connection to the LD2410B. If you have trouble reading sensor data you may have mixed up rx and tx bins so you can try to change them here.
uart:
  id: ld2410_uart
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 256000
  parity: NONE
  stop_bits: 1

ld2410:
  uart_id: ld2410_uart
  throttle: 1000ms
  id: ld2410_comp

sensor:
  ## this will report the uptime of the device. If your device reboots unexpectedly you can see it in this value.
  - platform: uptime
    type: seconds
    name: Uptime Sensor
    update_interval: 60s

  ## this will report the free memory. If your device reboots unexpectedly it may be because there is not enough free memory. In my experience there must be at least 40-50kb available at all times for reliable operation.
  - platform: template
    name: Free HEAP
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL);
    icon: "mdi:memory"
    entity_category: diagnostic
    state_class: measurement
    unit_of_measurement: "b"
    update_interval: 60s

  ## this reports the wifi signal strength of your wifi access point. If you want to reduce or increase your wifi output power of your access point you can use this value for reference. This value does not reflect the output power of the esp device.
  # - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
  #   name: "WiFi Signal dB"
  #   id: wifi_signal_db
  #   update_interval: 1s
  #   entity_category: "diagnostic"

  ## adds the brightness sensor. See https://esphome.io/components/sensor/bh1750/
  - platform: bh1750
    name: "Helligkeit"
    address: 0x23
    update_interval: 3s

  ## adds the bme680 sensors. see: https://esphome.io/components/sensor/bme68x_bsec2/
  - platform: bme68x_bsec2
    temperature:
      name: "Temperature"
      filters:
        - offset: -0.5
    # pressure: ## I disabled the pressure as I don't need it and disabling everything you don't need helps in memory consumption.
    #   name: "Air Pressure"
    humidity:
      name: "Humidity"
      # filters: ## You may need to calibrate your humidity.
      #   - offset: -8
    iaq:
      name: "IAQ"
      id: iaq
    co2_equivalent:
      name: "COÂ²"
    breath_voc_equivalent:
      name: "VOC"

## adds the ld2410b sensor. see: https://esphome.io/components/sensor/ld2410/#ld2410-component
- platform: ld2410
#   # disabling everything you don't need for your automations, to save memory, you will need to add these to calibrate the sensor.
#     moving_distance:
#       name: Moving Distance
#     still_distance:
#       name: Still Distance
#     moving_energy:
#       name: Move Energy
#     still_energy:
#       name: Still Energy
#     detection_distance:
#       name: Detection Distance
#   g0:
#     move_energy:
#       name: g0 move energy
#     still_energy:
#       name: g0 still energy
#   g1:
#     move_energy:
#       name: g1 move energy
#     still_energy:
#       name: g1 still energy
#   g2:
#     move_energy:
#       name: g2 move energy
#     still_energy:
#       name: g2 still energy
#   g3:
#     move_energy:
#       name: g3 move energy
#     still_energy:
#       name: g3 still energy
#   g4:
#     move_energy:
#       name: g4 move energy
#     still_energy:
#       name: g4 still energy
#   g5:
#     move_energy:
#       name: g5 move energy
#     still_energy:
#       name: g5 still energy
#   g6:
#     move_energy:
#       name: g6 move energy
#     still_energy:
#       name: g6 still energy
#   g7:
#     move_energy:
#       name: g7 move energy
#     still_energy:
#       name: g7 still energy
#   g8:
#     move_energy:
#       name: g8 move energy
#     still_energy:
#       name: g8 still energy

text_sensor:
  - platform: bme68x_bsec2
    iaq_accuracy:
      name: "IAQ Accuracy"

  - platform: template
    name: "Air Quality"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if ( int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) >= 51 && int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) >= 101 && int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) >= 151 && int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) >= 201 && int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) >= 251 && int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) >= 351) {
        return {"Extremely polluted"};
      }
      else {
        return {"error"};
      }

binary_sensor:
  - platform: gpio
    pin: GPIO27
    name: "Motion Sensor"
    device_class: motion

  ## this reports wether the device is online.
  - platform: status
    name: "${friendly_name} Status"

  ## sensors for ld2410
  - platform: ld2410
    has_target:
      name: Presence
    has_moving_target:
      name: Moving Target
    has_still_target:
      name: Still Target

## these are necessary to disable the bluetooth function of the ld2410 and to enable engineering mode. Engineering mode is used to calibrate the sensor. You are only able to see and change the sensitivity when the engineering mode is enabled.
# switch:
#   - platform: ld2410
#     engineering_mode:
#       name: "engineering mode"
#     bluetooth:
#       name: "control bluetooth"

## These values are necessary to calibrate the sensor.
# number:
#   - platform: ld2410
#         timeout:
#           name: timeout
#         max_move_distance_gate:
#           name: max move distance gate
#         max_still_distance_gate:
#           name: max still distance gate
#     g0:
#       move_threshold:
#         name: g0 move threshold
#       still_threshold:
#         name: g0 still threshold
#     g1:
#       move_threshold:
#         name: g1 move threshold
#       still_threshold:
#         name: g1 still threshold
#     g2:
#       move_threshold:
#         name: g2 move threshold
#       still_threshold:
#         name: g2 still threshold
#     g3:
#       move_threshold:
#         name: g3 move threshold
#       still_threshold:
#         name: g3 still threshold
#     g4:
#       move_threshold:
#         name: g4 move threshold
#       still_threshold:
#         name: g4 still threshold
#     g5:
#       move_threshold:
#         name: g5 move threshold
#       still_threshold:
#         name: g5 still threshold
#     g6:
#       move_threshold:
#         name: g6 move threshold
#       still_threshold:
#         name: g6 still threshold
#     g7:
#       move_threshold:
#         name: g7 move threshold
#       still_threshold:
#         name: g7 still threshold
#     g8:
#       move_threshold:
#         name: g8 move threshold
#       still_threshold:
#         name: g8 still threshold

## I use this button together with an automation to regularly restart the device. This helps in reliability.
button:
  - platform: restart
    name: "Restart ESPHome"
## I never needed these
# #   - platform: ld2410
# #     factory_reset:
# #       name: "factory reset"
# #     restart:
# #       name: "restart"
# #     query_params:
# #       name: query params
# # select:
# #   - platform: ld2410
# #     distance_resolution:
# #       name: "distance resolution"
